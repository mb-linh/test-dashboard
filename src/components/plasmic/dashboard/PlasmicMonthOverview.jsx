// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ecRpuAnYy4nftFeWhJKmXt
// Component: UJa0cuh9vWH_
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import PageLayout from "../../PageLayout"; // plasmic-import: IzMlfHGyHpm3/component
import DateTimeRangePicker from "../../DateTimeRangePicker"; // plasmic-import: srwHD4W5YwAX/component
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import Statistic from "../../Statistic"; // plasmic-import: nH1BxDDFpqfi/component
import Chart from "../../Chart"; // plasmic-import: h8FqozVztdjo/component
import Card from "../../Card"; // plasmic-import: 2sXicHPPoiQW/component
import { useScreenVariants as useScreenVariants_6WjHx4LTkSfu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6wjHx4LTkSFU/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ecRpuAnYy4nftFeWhJKmXt/projectcss
import sty from "./PlasmicMonthOverview.module.css"; // plasmic-import: UJa0cuh9vWH_/css
import image7Hg2LBiX9Rb99 from "./images/image7.svg"; // plasmic-import: Hg2LBiX9rb99/picture
import orderIcon0RXuqFu6ZsSz from "./images/orderIcon.svg"; // plasmic-import: 0rXuqFU6zsSz/picture
import dollarIconBnQcP1KoYLw from "./images/dollarIcon.svg"; // plasmic-import: BNQcP1KoY_Lw/picture
import cartIcon6W8RsHijag2V from "./images/cartIcon.svg"; // plasmic-import: 6w8RSHijag2v/picture

createPlasmicElementProxy;

export const PlasmicMonthOverview__VariantProps = new Array();

export const PlasmicMonthOverview__ArgProps = new Array();

const $$ = {};

function PlasmicMonthOverview__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "start.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    totalUsersByMonthCustomRange: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "1f17b999-8c06-4cd5-a9c9-58e97af96946",
        userArgs: {
          query: [$state.start.value]
        },
        cacheKey: `plasmic.$.1f17b999-8c06-4cd5-a9c9-58e97af96946.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalOrdersByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "a0611876-192e-4c1b-b450-d00af3eb0f66",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.a0611876-192e-4c1b-b450-d00af3eb0f66.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "fcbb936d-bc51-4f8e-9520-2304951abd9f",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.fcbb936d-bc51-4f8e-9520-2304951abd9f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentTotalCustomers: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "deaf52ae-bebf-4592-bf9a-d6c1882437aa",
        userArgs: {},
        cacheKey: `plasmic.$.deaf52ae-bebf-4592-bf9a-d6c1882437aa.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    _12MonthRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "b8b63947-b739-46eb-aaaf-9bb67c4c91c4",
        userArgs: {
          query: [$state.start.value]
        },
        cacheKey: `plasmic.$.b8b63947-b739-46eb-aaaf-9bb67c4c91c4.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMUserGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "87012dad-1777-4a79-a18d-3611894ea5e9",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.87012dad-1777-4a79-a18d-3611894ea5e9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMOrderGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "a10d2bdf-89d6-44f4-8f1b-11b44bced75d",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.a10d2bdf-89d6-44f4-8f1b-11b44bced75d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMAvgOrderGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "88dbe1a4-f3f8-4dc4-aa94-0f6dd4cd5265",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.88dbe1a4-f3f8-4dc4-aa94-0f6dd4cd5265.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    moMRevenueGrowth: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "3bd7aa99-152b-4496-8cd5-ff2842fec994",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.3bd7aa99-152b-4496-8cd5-ff2842fec994.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    currentAvgOrder: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "1bde8357-ae28-4f51-8b12-cf8bd6c15b9f",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.1bde8357-ae28-4f51-8b12-cf8bd6c15b9f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topCountriesByRevenue: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "fc44cf00-d033-4a82-ac2a-3d3f15f92417",
        userArgs: {},
        cacheKey: `plasmic.$.fc44cf00-d033-4a82-ac2a-3d3f15f92417.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topProductsByQuantitySold: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "7747212d-5e36-4a9c-a535-1b1fcbc860ba",
        userArgs: {
          query: [$state.start.value, $state.start.value]
        },
        cacheKey: `plasmic.$.7747212d-5e36-4a9c-a535-1b1fcbc860ba.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalProductsSold: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "c86444d5-3c93-4505-bebb-7c4f2a980ef9",
        userArgs: {},
        cacheKey: `plasmic.$.c86444d5-3c93-4505-bebb-7c4f2a980ef9.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topCategoriesByOrders: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "bc244f3e-51ca-4b88-beb8-623f1ad09542",
        userArgs: {
          query: [
            $state.start.value,
            $state.start.value,
            $state.start.value,
            $state.start.value
          ]
        },
        cacheKey: `plasmic.$.bc244f3e-51ca-4b88-beb8-623f1ad09542.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6WjHx4LTkSfu()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <section
                    className={classNames(projectcss.all, sty.section__dPyM)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__ggh8R)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Welcome back! "}
                      </h1>
                    </div>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__jcLAg)}
                  >
                    <DateTimeRangePicker
                      data-plasmic-name={"dateTimeRangePicker"}
                      data-plasmic-override={overrides.dateTimeRangePicker}
                      className={classNames(
                        "__wab_instance",
                        sty.dateTimeRangePicker
                      )}
                    >
                      {(() => {
                        const child$Props = {
                          allowClear: true,
                          bordered: true,
                          className: classNames("__wab_instance", sty.start),
                          onChange: generateStateOnChangePropForCodeComponents(
                            $state,
                            "value",
                            ["start", "value"],
                            AntdDatePicker_Helpers
                          ),
                          picker: "date",
                          popupScopeClassName: sty["start__datePickerPopup"],
                          showTime: false,
                          value: generateStateValueProp($state, [
                            "start",
                            "value"
                          ])
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "value",
                              plasmicStateName: "start.value"
                            }
                          ],

                          [],
                          AntdDatePicker_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <AntdDatePicker
                            data-plasmic-name={"start"}
                            data-plasmic-override={overrides.start}
                            {...child$Props}
                          />
                        );
                      })()}
                    </DateTimeRangePicker>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0Jaix
                      )}
                    >
                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__dDjr
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e4Snx
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__x9Pfa
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries
                                          .totalUsersByMonthCustomRange.data[0]
                                          .cumulative_users;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7HrZg
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const usersIncreasePercentage =
                                    $queries.moMUserGrowth.data[0]
                                      .user_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      usersIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const userIncreasePercentage =
                                      $queries.moMUserGrowth.data[0]
                                        .user_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      userIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        timeRange={"from last month"}
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__y17L
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__tqDhk
                              )}
                            >
                              {"Total users"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__nGyIk)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: image7Hg2LBiX9Rb99,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic___8Y6AR
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__slXk9
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__nkSw4
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries.totalOrdersByDateRange
                                          .data[0].order_count;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___6UMmC
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const ordersIncreasePercentage =
                                    $queries.moMOrderGrowth.data[0]
                                      .order_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      ordersIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const ordersIncreasePercentage =
                                      $queries.moMOrderGrowth.data[0]
                                        .order_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      ordersIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zVSH
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__kybTi
                              )}
                            >
                              {"New orders"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__hXmde)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: orderIcon0RXuqFu6ZsSz,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic___5YsBg
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nkerk
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__gCnZl
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          Intl.NumberFormat("en").format(
                                            $queries.currentAvgOrder.data[0]
                                              .avg_order_total
                                          )
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oww7J
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const avg_order_value_increase_percentage =
                                    $queries.moMAvgOrderGrowth.data[0]
                                      .avg_order_value_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      avg_order_value_increase_percentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const avg_order_value_increase_percentage =
                                      $queries.moMAvgOrderGrowth.data[0]
                                        .avg_order_value_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      avg_order_value_increase_percentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__kTpXh
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__hkys6
                              )}
                            >
                              {"Avg. order value"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__w20MA)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: dollarIconBnQcP1KoYLw,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__ktIbn
                        )}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gL6V1
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__liCxm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          Intl.NumberFormat("en").format(
                                            $queries.currentRevenue.data[0]
                                              .total_revenue_this_month
                                          )
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        numberTrend={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__e423
                            )}
                            style={(() => {
                              try {
                                return (() => {
                                  function decimalToPercentage(decimalValue) {
                                    const percentage = Math.floor(
                                      decimalValue * 1
                                    );
                                    return percentage;
                                  }
                                  const revenueIncreasePercentage =
                                    $queries.moMRevenueGrowth.data[0]
                                      .revenue_increase_percentage;
                                  const displayText =
                                    decimalToPercentage(
                                      revenueIncreasePercentage
                                    ) < 0
                                      ? {
                                          color:
                                            "var(--plasmic-token-danger-800)",
                                          backgroundColor:
                                            "var(--plasmic-token-danger-100)"
                                        }
                                      : {};
                                  return displayText;
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    function decimalToPercentage(decimalValue) {
                                      const percentage = Math.floor(
                                        decimalValue * 1
                                      );
                                      return percentage + "%";
                                    }
                                    const revenueIncreasePercentage =
                                      $queries.moMRevenueGrowth.data[0]
                                        .revenue_increase_percentage;
                                    const displayText = decimalToPercentage(
                                      revenueIncreasePercentage
                                    );
                                    return displayText;
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "NULL";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5AzL2
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__zmec
                              )}
                            >
                              {"Total revenue"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__sGWmh)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: cartIcon6W8RsHijag2V,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />
                    </Stack__>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__qShTj)}
                  >
                    <Chart
                      data-plasmic-name={"chart"}
                      data-plasmic-override={overrides.chart}
                      className={classNames("__wab_instance", sty.chart)}
                      get12MoRevenue={$queries._12MonthRevenue}
                    />
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__bzwT9)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ghfkt)}
                    >
                      <Card
                        className={classNames(
                          "__wab_instance",
                          sty.card__kw1Rm
                        )}
                        title={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__jirPy
                            )}
                          >
                            {"Top products sold"}
                          </h2>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yhkfd
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wlAiy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___63I66
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Total users";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.topProductsByQuantitySold.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qVoSf
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lcooC
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.product_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Product ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0V2Ql
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.total_quantity_sold;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Revenue";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </Card>
                      <Card
                        className={classNames("__wab_instance", sty.card__x7SF)}
                        title={
                          <h2
                            className={classNames(
                              projectcss.all,
                              projectcss.h2,
                              projectcss.__wab_text,
                              sty.h2__tb5Bz
                            )}
                          >
                            {"Top product categories"}
                          </h2>
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__j0Glk
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__n9R34
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__e5Q3N
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return undefined;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "Total users";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                          {(_par =>
                            !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                            (() => {
                              try {
                                return $queries.topCategoriesByOrders.data;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return [];
                                }
                                throw e;
                              }
                            })()
                          ).map((__plasmic_item_0, __plasmic_idx_0) => {
                            const currentItem = __plasmic_item_0;
                            const currentIndex = __plasmic_idx_0;
                            return (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__oLopi
                                )}
                                key={currentIndex}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__leUUv
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.category_name;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Product ";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__bIAm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return currentItem.num_orders_in_category;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Revenue";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            );
                          })}
                        </div>
                      </Card>
                    </Stack__>
                  </section>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "h1", "dateTimeRangePicker", "start", "chart"],
  pageLayout: ["pageLayout", "h1", "dateTimeRangePicker", "start", "chart"],
  h1: ["h1"],
  dateTimeRangePicker: ["dateTimeRangePicker", "start"],
  start: ["start"],
  chart: ["chart"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMonthOverview__ArgProps,
          internalVariantPropNames: PlasmicMonthOverview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMonthOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMonthOverview";
  } else {
    func.displayName = `PlasmicMonthOverview.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "ecRpuAnYy4nftFeWhJKmXt"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicMonthOverview = Object.assign(
  // Top-level PlasmicMonthOverview renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    dateTimeRangePicker: makeNodeComponent("dateTimeRangePicker"),
    start: makeNodeComponent("start"),
    chart: makeNodeComponent("chart"),
    // Metadata about props expected for PlasmicMonthOverview
    internalVariantProps: PlasmicMonthOverview__VariantProps,
    internalArgProps: PlasmicMonthOverview__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMonthOverview;
/* prettier-ignore-end */
