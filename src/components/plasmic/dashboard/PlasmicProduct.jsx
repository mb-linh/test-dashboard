// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ecRpuAnYy4nftFeWhJKmXt
// Component: WvJy5Ry8nBMv
import * as React from "react";
import {
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import PageLayout from "../../PageLayout"; // plasmic-import: IzMlfHGyHpm3/component
import DateTimeRangePicker from "../../DateTimeRangePicker"; // plasmic-import: srwHD4W5YwAX/component
import { datePickerHelpers as AntdDatePicker_Helpers } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import Statistic from "../../Statistic"; // plasmic-import: nH1BxDDFpqfi/component
import { RichTable } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { tableHelpers as RichTable_Helpers } from "@plasmicpkgs/plasmic-rich-components/skinny/rich-table";
import { useScreenVariants as useScreenVariants_6WjHx4LTkSfu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 6wjHx4LTkSFU/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ecRpuAnYy4nftFeWhJKmXt/projectcss
import sty from "./PlasmicProduct.module.css"; // plasmic-import: WvJy5Ry8nBMv/css
import orderIcon0RXuqFu6ZsSz from "./images/orderIcon.svg"; // plasmic-import: 0rXuqFU6zsSz/picture
import cartIcon6W8RsHijag2V from "./images/cartIcon.svg"; // plasmic-import: 6w8RSHijag2v/picture
import dollarIconBnQcP1KoYLw from "./images/dollarIcon.svg"; // plasmic-import: BNQcP1KoY_Lw/picture

createPlasmicElementProxy;

export const PlasmicProduct__VariantProps = new Array();

export const PlasmicProduct__ArgProps = new Array();

const $$ = {};

function PlasmicProduct__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "table.selectedRowKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKey", RichTable_Helpers)
      },
      {
        path: "table.selectedRow",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRow", RichTable_Helpers)
      },
      {
        path: "table.selectedRows",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRows", RichTable_Helpers)
      },
      {
        path: "table.selectedRowKeys",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("selectedRowKeys", RichTable_Helpers)
      },
      {
        path: "start.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      },
      {
        path: "end.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        onMutate: generateOnMutateForSpec("value", AntdDatePicker_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    revenueByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "a7dd6f0b-a35e-48ef-b963-672182370945",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.a7dd6f0b-a35e-48ef-b963-672182370945.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    topProductsByQuantityLastYear: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "f2928db3-908a-4d11-a7d2-7908848e1ad5",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.f2928db3-908a-4d11-a7d2-7908848e1ad5.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    totalProductCountByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "94caa8b8-5a19-4443-8fb2-ebb4e23ec1db",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.94caa8b8-5a19-4443-8fb2-ebb4e23ec1db.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    unitsSoldByDateRange: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "661d1254-63f4-4ca6-9f04-3012509b9b7e",
        userArgs: {
          query: [$state.start.value, $state.end.value]
        },
        cacheKey: `plasmic.$.661d1254-63f4-4ca6-9f04-3012509b9b7e.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    listAllProductNames: usePlasmicDataOp(() => {
      return {
        sourceId: "3gDMibUwZhkSjkUSK6gfBF",
        opId: "55f7f9a7-0d37-4614-b20b-d023d95ffa8c",
        userArgs: {},
        cacheKey: `plasmic.$.55f7f9a7-0d37-4614-b20b-d023d95ffa8c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_6WjHx4LTkSfu()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <React.Fragment>
                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {"Product Metrics"}
                  </h1>
                  <section
                    className={classNames(projectcss.all, sty.section__nGx8)}
                  >
                    <DateTimeRangePicker
                      data-plasmic-name={"dateTimeRangePicker"}
                      data-plasmic-override={overrides.dateTimeRangePicker}
                      className={classNames(
                        "__wab_instance",
                        sty.dateTimeRangePicker
                      )}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___6S7Xl
                      )}
                    >
                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__eAErR
                        )}
                        hideTrendTracker={true}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___0Lu1
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__lpfru
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $queries
                                          .totalProductCountByDateRange.data[0]
                                          .product_count;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___8RLc
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__nynhA
                              )}
                            >
                              {"Product inventory"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__zLzsz)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: orderIcon0RXuqFu6ZsSz,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic___1Zfyd
                        )}
                        hideTrendTracker={true}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bXsf
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__k1Uf
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return Intl.NumberFormat("en").format(
                                          $queries.unitsSoldByDateRange.data[0]
                                            .products_sold
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yVfoy
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p__zrnNn
                              )}
                            >
                              {"Units sold"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img__vyAjw)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: cartIcon6W8RsHijag2V,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />

                      <Statistic
                        className={classNames(
                          "__wab_instance",
                          sty.statistic__vk2S3
                        )}
                        hideTrendTracker={true}
                        number={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__x2ZO5
                            )}
                          >
                            <React.Fragment>
                              <React.Fragment>{""}</React.Fragment>
                              {
                                <h2
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.h2,
                                    projectcss.__wab_text,
                                    sty.h2__ems1T
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "$" +
                                          Intl.NumberFormat("en").format(
                                            $queries.revenueByDateRange.data[0]
                                              .total_revenue
                                          )
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "NULL";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </h2>
                              }

                              <React.Fragment>{""}</React.Fragment>
                            </React.Fragment>
                          </div>
                        }
                        unit={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gi8Ac
                            )}
                          >
                            <p
                              className={classNames(
                                projectcss.all,
                                projectcss.p,
                                projectcss.__wab_text,
                                sty.p___3ZzDg
                              )}
                            >
                              {"Total revenue"}
                            </p>
                            <PlasmicImg__
                              alt={""}
                              className={classNames(sty.img___2PrGq)}
                              displayHeight={"auto"}
                              displayMaxHeight={"28px"}
                              displayMaxWidth={"28px"}
                              displayMinHeight={"0"}
                              displayMinWidth={"0"}
                              displayWidth={"auto"}
                              loading={"lazy"}
                              src={{
                                src: dollarIconBnQcP1KoYLw,
                                fullWidth: 150,
                                fullHeight: 150,
                                aspectRatio: 1
                              }}
                            />
                          </div>
                        }
                      />
                    </Stack__>
                  </section>
                  <section
                    className={classNames(projectcss.all, sty.section__j1At4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hq15N)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          projectcss.__wab_text,
                          sty.h2___97QYz
                        )}
                      >
                        {"Top selling products"}
                      </h2>
                      {(() => {
                        const child$Props = {
                          className: classNames("__wab_instance", sty.table),
                          data: (() => {
                            try {
                              return $queries.topProductsByQuantityLastYear;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          defaultSize: "large",
                          fields: (() => {
                            const __composite = [
                              {
                                key: "product_id",
                                fieldId: "product_id",
                                isHidden: null
                              },
                              {
                                key: "product_name",
                                fieldId: "product_name",
                                title: null
                              },
                              {
                                key: "total_quantity_sold",
                                fieldId: "total_quantity_sold",
                                title: null
                              }
                            ];

                            __composite["0"]["isHidden"] = true;
                            __composite["1"]["title"] = "Product";
                            __composite["2"]["title"] = "Quantity sold";
                            return __composite;
                          })(),
                          hideDensity: true,
                          hideExports: false,
                          hideSearch: false,
                          onRowSelectionChanged: async (...eventArgs) => {
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKey",
                              ["table", "selectedRowKey"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRow",
                              ["table", "selectedRow"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRows",
                              ["table", "selectedRows"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                            generateStateOnChangePropForCodeComponents(
                              $state,
                              "selectedRowKeys",
                              ["table", "selectedRowKeys"],
                              RichTable_Helpers
                            ).apply(null, eventArgs);
                          },
                          scopeClassName: sty["table__instance"],
                          selectedRowKey: generateStateValueProp($state, [
                            "table",
                            "selectedRowKey"
                          ]),
                          selectedRowKeys: generateStateValueProp($state, [
                            "table",
                            "selectedRowKeys"
                          ]),
                          themeResetClassName: classNames(
                            projectcss.root_reset,
                            projectcss.root_reset_tags,
                            projectcss.plasmic_default_styles,
                            projectcss.plasmic_mixins,
                            projectcss.plasmic_tokens,
                            plasmic_antd_5_hostless_css.plasmic_tokens,
                            plasmic_plasmic_rich_components_css.plasmic_tokens
                          )
                        };
                        initializeCodeComponentStates(
                          $state,
                          [
                            {
                              name: "selectedRowKey",
                              plasmicStateName: "table.selectedRowKey"
                            },
                            {
                              name: "selectedRow",
                              plasmicStateName: "table.selectedRow"
                            },
                            {
                              name: "selectedRows",
                              plasmicStateName: "table.selectedRows"
                            },
                            {
                              name: "selectedRowKeys",
                              plasmicStateName: "table.selectedRowKeys"
                            }
                          ],

                          [],
                          RichTable_Helpers ?? {},
                          child$Props
                        );
                        return (
                          <RichTable
                            data-plasmic-name={"table"}
                            data-plasmic-override={overrides.table}
                            {...child$Props}
                          />
                        );
                      })()}
                    </div>
                  </section>
                </React.Fragment>
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "h1", "dateTimeRangePicker", "table"],
  pageLayout: ["pageLayout", "h1", "dateTimeRangePicker", "table"],
  h1: ["h1"],
  dateTimeRangePicker: ["dateTimeRangePicker"],
  table: ["table"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProduct__ArgProps,
          internalVariantPropNames: PlasmicProduct__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProduct__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProduct";
  } else {
    func.displayName = `PlasmicProduct.${nodeName}`;
  }
  return func;
}

function withUsePlasmicAuth(WrappedComponent) {
  const WithUsePlasmicAuthComponent = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "ecRpuAnYy4nftFeWhJKmXt"
    });
    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicProduct = Object.assign(
  // Top-level PlasmicProduct renders the root element
  withUsePlasmicAuth(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    h1: makeNodeComponent("h1"),
    dateTimeRangePicker: makeNodeComponent("dateTimeRangePicker"),
    table: makeNodeComponent("table"),
    // Metadata about props expected for PlasmicProduct
    internalVariantProps: PlasmicProduct__VariantProps,
    internalArgProps: PlasmicProduct__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Product",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProduct;
/* prettier-ignore-end */
